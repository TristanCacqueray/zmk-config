/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Tristan de Cacqueray
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Force Linux unicode sequence
#define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))
#define OS_UNICODE_TRAIL &macro_tap &kp SPACE

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/helper.h"

/* Homerow mods */
#define KEYS_L   LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R   RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS   LH0 LH1 LH2 RH0 RH1 RH2                                                 // thumbs

#define QUICK_TAP_MS 200

// Home row mods
#define MAKE_HRM(NAME, FLAVOR, HOLD, TAP, TRIGGER_POS, HOOK) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = FLAVOR; \
        tapping-term-ms = <290>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        HOOK \
    )
MAKE_HRM(hml, "balanced", &kp, &kp, KEYS_R THUMBS, hold-trigger-on-release;)  // left-hand HRMs
MAKE_HRM(hmr, "balanced", &kp, &kp, KEYS_L THUMBS, hold-trigger-on-release;)  // right-hand HRMs
MAKE_HRM(hll, "balanced", &mo, &kp, KEYS_R THUMBS, )   // left-hand Home Layer
MAKE_HRM(hlr, "balanced", &mo, &kp, KEYS_L THUMBS, )   // right-hand Home Layer
MAKE_HRM(hhr, "hold-preferred", &mo, &kp, KEYS_L THUMBS, )   // right-hand Home Layer

// Layers
#define DEFAULT 0
#define FUN     1
#define NAV     2
#define WM      3
#define MICE    4
#define SYSTEM  5
#define FRENCH  6
#define GREEK   7

// hold: momentary layer, shift+tap: toggle layer
ZMK_BEHAVIOR(fun_tog, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mo FUN>, <&to FUN>;
)
ZMK_BEHAVIOR(nav_tog, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mo NAV>, <&to NAV>;
)

ZMK_BEHAVIOR(mt_repeat, hold_tap,         \
    flavor = "hold-preferred";            \
    tapping-term-ms = <400>;              \
    quick-tap-ms = <QUICK_TAP_MS>;        \
    bindings = <&kp>, <&kp>;              \
)
#define SHIFT_BSPC &mt_repeat LSHIFT BSPC

&sl {
    release-after-ms = <2000>;
};

#include "./combos.dtsi"

ZMK_LAYER(base,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &tog MICE     &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P         &sl FRENCH
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp TAB       &hll WM A     &hll FUN S    &hml LCTRL D  &hml LALT F   &kp G             &kp H         &hmr LALT J   &hmr LCTRL K  &hlr FUN L    &hhr WM SEMI  &sl GREEK
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp ESC       &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &kp RET
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &kp LMETA     &none         SHIFT_BSPC        &kp SPACE     &nav_tog      &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fun,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &kp EXCL      &kp AT        &kp UP        &kp LBRC      &kp RBRC          &kp DQT       &kp N7        &kp N8        &kp N9        &kp STAR      &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp HASH      &kp LEFT      &kp DOWN      &kp RIGHT     &kp DLLR          &kp PG_UP     &kp N4        &kp N5        &kp N6        &dot_eq       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp LBKT      &kp RBKT      &kp LPAR      &kp RPAR      &kp AMPS          &kp PG_DN     &kp N1        &kp N2        &kp N3        &kp BSLH      &trans
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &trans        &to DEFAULT   &trans            &trans        &kp N0        &kp DOT
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

#define V_DN C_VOLUME_DOWN
#define V_UP C_VOLUME_UP
#define B_DN C_BRIGHTNESS_DEC
#define B_UP C_BRIGHTNESS_INC

ZMK_LAYER(nav,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &to DEFAULT   &kp INS       &kp HOME      &kp UP        &kp END       &kp PG_UP         &none         &kp F7        &kp F8        &kp F9        &kp F10       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp DEL       &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_DN         &kp PG_UP     &kp F4        &kp F5        &kp F6        &kp F11       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp V_DN      &kp V_UP      &kp B_DN      &kp B_UP      &none             &kp PG_DN     &kp F1        &kp F2        &kp F3        &kp F12       &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &trans        &to DEFAULT   &trans            &trans        &to DEFAULT   &kp PSCRN
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

&mmv {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <400>;
  delay-ms = <0>;
};

&mwh {
  acceleration-exponent = <0>;
  time-to-max-speed-ms = <500>;
  delay-ms = <0>;
};

#include "./codegen.dtsi"
