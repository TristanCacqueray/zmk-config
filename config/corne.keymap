/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Tristan de Cacqueray
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define CONFIG_WIRELESS 1

#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

// Force Linux unicode sequence
#define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))
#define OS_UNICODE_TRAIL &macro_tap &kp SPACE

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"
#include "../zmk-nodefree-config/international_chars/french.dtsi"

/* Homerow mods */
#define KEYS_L   LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R   RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS   LH0 LH1 LH2 RH0 RH1 RH2                                                 // thumbs

#define QUICK_TAP_MS 200

// Home row mods
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS, HOOK) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <290>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        HOOK \
    )
MAKE_HRM(hml,  &kp, &kp, KEYS_R THUMBS, hold-trigger-on-release;)  // left-hand HRMs
MAKE_HRM(hmr,  &kp, &kp, KEYS_L THUMBS, hold-trigger-on-release;)  // right-hand HRMs
MAKE_HRM(hll, &mo, &kp, KEYS_R THUMBS, )   // left-hand Home Layer
MAKE_HRM(hlr, &mo, &kp, KEYS_L THUMBS, )   // right-hand Home Layer

// Layers
#define DEFAULT 0
#define FUN     1
#define NAV     2
#define MICE    3
#define CTRL    4
#define UNICODE 5
#define GREEK   6
#define EMACS   7

// hold: momentary layer, shift+tap: toggle layer
ZMK_BEHAVIOR(fun_tog, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mo FUN>, <&to FUN>;
)
ZMK_BEHAVIOR(nav_tog, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&mo NAV>, <&to NAV>;
)

ZMK_BEHAVIOR(mt_repeat, hold_tap,         \
    flavor = "hold-preferred";            \
    tapping-term-ms = <400>;              \
    quick-tap-ms = <QUICK_TAP_MS>;        \
    bindings = <&kp>, <&kp>;              \
)
#define SHIFT_BSPC &mt_repeat LSHIFT BSPC

&sl {
    release-after-ms = <2000>;
};

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

ZMK_COMBO(minus,   &kp MINUS,       LT2 LM2,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(under,   &kp UNDER,       LT1 LM1,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(amps,    &kp AMPS,        LM1 LB1,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(hash,    &kp HASH,        LM2 LB2,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(grave,   &kp GRAVE,       RM1 RB1,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(bslh,    &kp BSLH,        RM2 RB2,     DEFAULT FUN, COMBO_TERM_FAST)

ZMK_COMBO(squote,  &kp SQT,         RT2 RM2,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(dquote,  &kp DQT,         RT1 RM1,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(equal,   &kp EQUAL,       RM0 RM1,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(pipe,    &kp PIPE,        RM3 RM4,     DEFAULT FUN, COMBO_TERM_FAST)

ZMK_COMBO(excl,    &kp EXCL,        LT3 LM3,     DEFAULT FUN, COMBO_TERM_FAST)
ZMK_COMBO(arob,    &kp AT,          LT3 LT2,     DEFAULT FUN, COMBO_TERM_FAST)

ZMK_COMBO(lbkt,    &kp LBKT,        LM4 LM3,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(lpar,    &kp LPAR,        LM3 LM2,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(rpar,    &kp RPAR,        LM2 LM1,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(rbkt,    &kp RBKT,        LM1 LM0,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(lbrc,    &kp LBRC,        LT2 LT1,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(rbrc,    &kp RBRC,        LT1 LT0,     DEFAULT FUN, COMBO_TERM_SLOW)

ZMK_COMBO(tild,    &kp TILDE,       RT1 RT2,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(percent, &kp PRCNT,       RT2 RT3,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(star,    &kp STAR,        RM1 RM2,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(plus,    &kp PLUS,        RM2 RM3,     DEFAULT FUN, COMBO_TERM_SLOW)

ZMK_COMBO(dllr,    &kp DLLR,        LM0 LB0,     DEFAULT FUN, COMBO_TERM_SLOW)
ZMK_COMBO(caret,   &kp CARET,       RT3 RM3,     DEFAULT FUN, COMBO_TERM_SLOW)

ZMK_BEHAVIOR(dot_eq, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp COLON &kp EQUAL>;
)
ZMK_COMBO(doteq,   &dot_eq,         RM4 RB4,     DEFAULT FUN, COMBO_TERM_SLOW)

ZMK_LAYER(base,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &tog MICE     &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P         &sl UNICODE
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp TAB       &hll EMACS A  &hll FUN S    &hml LCTRL D  &hml LALT F   &kp G             &kp H         &hmr LALT J   &hmr LCTRL K  &hlr FUN L    &hlr EMACS SEMI &sl GREEK
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp ESC       &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &kp RET
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &kp LMETA     &kp BSPC      SHIFT_BSPC        &kp SPACE     &nav_tog      &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fun,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &kp EXCL      &kp AT        &kp UP        &kp LBRC      &kp RBRC          &kp DQT       &kp N7        &kp N8        &kp N9        &kp STAR      &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp HASH      &kp LEFT      &kp DOWN      &kp RIGHT     &kp DLLR          &kp PG_UP     &kp N4        &kp N5        &kp N6        &kp PLUS      &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp LBKT      &kp RBKT      &kp LPAR      &kp RPAR      &kp AMPS          &kp PG_DN     &kp N1        &kp N2        &kp N3        &kp BSLH      &trans
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &trans        &to DEFAULT   &trans            &trans        &kp N0        &kp DOT
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

#define V_DN C_VOLUME_DOWN
#define V_UP C_VOLUME_UP
#define B_DN C_BRIGHTNESS_DEC
#define B_UP C_BRIGHTNESS_INC

ZMK_LAYER(nav,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &to DEFAULT   &kp INS       &kp HOME      &kp UP        &kp END       &kp PG_UP         &none         &kp F7        &kp F8        &kp F9        &kp F10       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp DEL       &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_DN         &kp PG_UP     &kp F4        &kp F5        &kp F6        &kp F11       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp V_DN      &kp V_UP      &kp B_DN      &kp B_UP      &none             &kp PG_DN     &kp F1        &kp F2        &kp F3        &kp F12       &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &trans        &to DEFAULT   &trans            &trans        &to DEFAULT   &kp PSCRN
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

#define U_MOUSE_MOVE_MAX 1250
#define U_MOUSE_SCROLL_MAX 100

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &mwh SCROLL_UP
#define U_WH_D &mwh SCROLL_DOWN

&mmv {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <450>;
  delay-ms = <0>;
};

&mwh {
  acceleration-exponent = <1>;
  time-to-max-speed-ms = <2000>;
  delay-ms = <0>;
};

ZMK_LAYER(mice,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &to DEFAULT   &none         &none         &none         &none         &none             &none         &mkp LCLK     U_MS_U        &mkp RCLK     &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &to CTRL      &none         &none         &none         &none         &none             U_WH_U        U_MS_L        U_MS_D        U_MS_R        &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none         &none             U_WH_D        &mkp MCLK     &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none         &none             &none         &to DEFAULT   &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(ctrl,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &to DEFAULT   &out OUT_TOG  &none         &none         &none         &none             &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &to DEFAULT   &none         &none         &none         &none         &none             &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none                                    _BT_SEL_KEYS_                                  &none         &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none         &none             &none         &to DEFAULT   &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

#define I_CIRC &fr_i_circumflex
#define E_CIRC &fr_e_circumflex
#define A_CIRC &fr_a_circumflex
#define O_CIRC &fr_o_circumflex

#define I_TREMA &fr_i_diaeresis
#define E_TREMA &fr_e_diaeresis
#define U_TREMA &fr_u_diaeresis

ZMK_UNICODE_SINGLE(dotdotdot, N2, N0, N2, N6) // …
ZMK_UNICODE_SINGLE(euro_sign, N0, N0,  E, N9) // €

ZMK_LAYER(unicode,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &none         &fr_e_grave   &fr_e_acute   E_CIRC        &none             &none         &fr_u_grave   I_CIRC        &fr_oe        &kp LS(ESC)   &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &fr_a_grave   A_CIRC        E_TREMA       &none         &euro_sign        &none         U_TREMA       I_TREMA       O_CIRC        &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &fr_c_cedilla &none         &none             &none         &none         &none         &dotdotdot    &el_lambda    &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none         &none             &none         &to DEFAULT   &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_UNICODE_SINGLE(el_sum,   N2, N2, N9, N5) // ⊕
ZMK_UNICODE_SINGLE(el_prod,  N0, N0,  D, N7) // ×
ZMK_UNICODE_SINGLE(el_nat,   N0, N0, N4,  E) // N
ZMK_UNICODE_SINGLE(el_real,  N2, N1, N1,  D) // ℝ

ZMK_LAYER(greek,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &el_omega     &el_eta       &el_epsilon   &el_rho       &el_tau           &el_gamma     &el_upsilon   &el_iota      &el_omikron   &el_pi        &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &el_alpha     &el_sigma     &el_delta     &el_phi       &el_theta         &el_chi       &el_prod      &el_kappa     &el_lambda    &el_psi       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &el_zeta      &el_xi        &none         &el_omega     &el_beta          &el_nu        &el_mu        &el_nat       &el_real      &el_sum       &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none         &none             &none         &to DEFAULT   &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_BEHAVIOR(ecx_0, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp N0>;
)
ZMK_BEHAVIOR(ecx_1, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp N1>;
)
ZMK_BEHAVIOR(ecx_2, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp N2>;
)
ZMK_BEHAVIOR(ecx_3, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp N3>;
)
ZMK_BEHAVIOR(ecx_b, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp B>;
)
ZMK_BEHAVIOR(ecc_pp, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(C) &kp P &kp P>;
)
ZMK_BEHAVIOR(ecc_pf, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp LC(C) &kp P &kp F>;
)

ZMK_LAYER(emacs,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &none         &none         &kp LG(RET)   &none         &none             &none         &none         &none         &ecc_pf       &ecc_pp       &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp LG(TAB)   &kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LG(G)         &kp LG(H)     &kp LG(J)     &kp LG(K)     &kp LG(L)     &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none         &ecx_b            &ecx_0        &ecx_1        &ecx_2        &ecx_3        &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none         &none             &none         &to DEFAULT   &none
//                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)
