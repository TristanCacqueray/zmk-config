/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Tristan de Cacqueray
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

#define DEFAULT 0
#define FUN     1
#define UPPER   2
#define CTRL    3

#define V_DN C_VOLUME_DOWN
#define V_UP C_VOLUME_UP
#define B_DN C_BRIGHTNESS_DEC
#define B_UP C_BRIGHTNESS_INC

/ {
    combos {
        compatible = "zmk,combos";
        combo_altl {
            timeout-ms = <50>;
            key-positions = <15 17>;
            layers = <DEFAULT>;
            bindings = <&kp LALT>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <DEFAULT>;
            bindings = <&kp LCTRL>;
        };
    };
};

/ {
    // https://zmk.dev/docs/behaviors/hold-tap
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &tog CTRL &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp GRAVE
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SINGLE_QUOTE
   &kp ESC   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RET
             &kp LMETA &kp LSHIFT &kp BSPC   &kp SPACE &mo FUN &kp MINUS
                        >;
                };
                fun_layer {
                        bindings = <
   &kp INS       &kp EXCL &kp AT   &kp UP   &kp LBRC  &kp RBRC   &kp PG_UP &kp N7 &kp N8 &kp N9 &kp STAR &none
   &kp PRCNT     &kp HASH &kp LEFT &kp DOWN &kp RIGHT &kp DLLR   &kp PG_DN &kp N4 &kp N5 &kp N6 &kp PLUS &kp CARET
   MO_TOG(UPPER) &kp LBKT &kp RBKT &kp LPAR &kp RPAR  &kp AMPS   &kp N0    &kp N1 &kp N2 &kp N3 &kp BSLH &kp EQUAL
                                        &trans  &trans  &trans   &trans  &trans &kp DOT
                        >;
                };
                upper_layer {
                        bindings = <
   &kp SYSREQ    &none    &kp HOME &kp UP   &kp END   &kp PG_UP    &none &kp F7 &kp F8 &kp F9 &kp F10 &none
   &kp TAB       &kp DEL  &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN    &none &kp F4 &kp F5 &kp F6 &kp F11 &none
   MO_TOG(UPPER) &kp V_DN &kp V_UP &kp B_DN &kp B_UP  &sys_reset   &none &kp F1 &kp F2 &kp F3 &kp F12 &none
                                          &trans  &trans  &trans   &to DEFAULT &trans &trans
                        >;
                };
                ctrl_layer {
                       bindings = <
   &tog CTRL &out OUT_TOG &none      &none &none &none        &none &none &none &none &none &none
   &none     &bt BT_PRV   &bt BT_NXT &none &none &none        &none &none &none &none &none &none
   &none     &none        &none      &none &none &bt BT_CLR   &none &none &none &none &none &none
                                     &none &none &none        &to DEFAULT &none &none
                       >;
                };
        };
};
