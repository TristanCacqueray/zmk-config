/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Tristan de Cacqueray
 *
 * SPDX-License-Identifier: MIT
 */

/*
             42 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────────┬────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯
              ╰────────────┴────────────╯

 * Source: https://github.com/urob/zmk-nodefree-config/blob/8506dbaaee9b46d200aa553a94b6dbca8560a5e1/keypos_def/keypos_42keys.h
 */

#define KEYS_LT   0  1  2  3  4  5
#define KEYS_LM  12 13 14 15 16 17
#define KEYS_LB  24 25 26 27 28 29
#define KEYS_RT   6  7  8  9 10 11
#define KEYS_RM  18 19 20 21 22 23
#define KEYS_RB  30 31 32 33 34 35

// left keys
#define KEYS_L   KEYS_LT KEYS_LM KEYS_LB
// right keys
#define KEYS_R   KEYS_RT KEYS_RM KEYS_RB
// thumb keys
#define KEYS_TH  36 37 38 39 40 41

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

#define DEFAULT 0
#define FUN     1
#define NAV     2
#define CTRL    3

#define V_DN C_VOLUME_DOWN
#define V_UP C_VOLUME_UP
#define B_DN C_BRIGHTNESS_DEC
#define B_UP C_BRIGHTNESS_INC

#define QUICK_TAP_MS 175

/ {
    // https://zmk.dev/docs/behaviors/hold-tap
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&tog>;
        };

        hml: behavior_hml {
             compatible = "zmk,behavior-hold-tap";
             label = "hml";
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <QUICK_TAP_MS>;
             require-prior-idle-ms = <150>;
             #binding-cells = <2>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <KEYS_R KEYS_TH>;
             hold-trigger-on-release;
        };

        hmr: behavior_hmr {
             compatible = "zmk,behavior-hold-tap";
             label = "hmr";
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <QUICK_TAP_MS>;
             require-prior-idle-ms = <150>;
             #binding-cells = <2>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <KEYS_L KEYS_TH>;
             hold-trigger-on-release;
        };

        lhml: behavior_lhml {
             compatible = "zmk,behavior-hold-tap";
             label = "lhml";
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <QUICK_TAP_MS>;
             require-prior-idle-ms = <150>;
             #binding-cells = <2>;
             bindings = <&mo>, <&kp>;
             hold-trigger-key-positions = <KEYS_R KEYS_TH>;
             hold-trigger-on-release;
        };

        lhmr: behavior_lhmr {
             compatible = "zmk,behavior-hold-tap";
             flavor = "balanced";
             label = "lhmr";
             tapping-term-ms = <280>;
             quick-tap-ms = <QUICK_TAP_MS>;
             require-prior-idle-ms = <150>;
             #binding-cells = <2>;
             bindings = <&mo>, <&kp>;
             hold-trigger-key-positions = <KEYS_L KEYS_TH>;
             hold-trigger-on-release;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none     &kp Q &kp W       &kp E        &kp R       &kp T     &kp Y &kp U        &kp I            &kp O         &kp P    &none
   &kp TAB   &kp A &lhml FUN S &hml LCTRL D &hml LALT F &kp G     &kp H &hmr LALT J  &hmr LCTRL K     &lhmr FUN L   &kp SEMI &kp SINGLE_QUOTE
   &kp ESC   &kp Z &kp X       &kp C        &kp V       &kp B     &kp N &kp M        &kp COMMA        &kp DOT       &kp FSLH &kp RET
                                &kp LMETA &kp LSHIFT &kp BSPC     &kp SPACE &mo NAV &none
                        >;
                };
                fun_layer {
                        bindings = <
   &none   &kp EXCL &kp AT    &kp PRCNT &kp LBRC      &kp RBRC   &kp LS(SQT) &kp N7 &kp N8 &kp N9 &kp STAR &none
   &trans  &kp HASH &kp CARET &kp MINUS &kp LS(MINUS) &kp DLLR   &kp PG_DN   &kp N4 &kp N5 &kp N6 &kp PLUS &none
   &trans  &kp LBKT &kp RBKT  &kp LPAR  &kp RPAR      &kp AMPS   &kp EQUAL   &kp N1 &kp N2 &kp N3 &kp BSLH &none
                                        &trans  &trans  &trans   &trans  &kp N0 &kp DOT
                        >;
                };
                nav_layer {
                        bindings = <
   &none   &kp INS  &kp HOME &kp UP   &kp END   &kp PG_UP    &none     &kp F7 &kp F8 &kp F9 &kp F10 &none
   &trans  &kp DEL  &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN    &kp PG_UP &kp F4 &kp F5 &kp F6 &kp F11 &none
   &trans  &kp V_DN &kp V_UP &kp B_DN &kp B_UP  &sys_reset   &kp PG_DN &kp F1 &kp F2 &kp F3 &kp F12 &none
                                    &trans  &trans  &trans   &trans    &to DEFAULT &trans
                        >;
                };
                ctrl_layer {
                       bindings = <
   &tog CTRL &out OUT_TOG &none      &none &none &none        &none &none &none &none &none &none
   &none     &bt BT_PRV   &bt BT_NXT &none &none &none        &none &none &none &none &none &none
   &none     &none        &none      &none &none &bt BT_CLR   &none &none &none &none &none &none
                                     &none &none &none        &none &to DEFAULT &none
                       >;
                };
        };
};
